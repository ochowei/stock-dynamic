# -*- coding: utf-8 -*-
"""Dynamic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zBF_qZ9T9X1_728HBztNtFMp6yuOrcGc
"""

#儲存格1

# @title
#儲存格2
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re

# @title
#儲存格3
import pytz # 引入 pytz 函式庫

def analyze_fixed_time_lag(ticker: str, interval: str, holding_hours: float,
                           period: str = None, start_date: str = None, end_date: str = None):
    """
    分析一檔股票，在 "指定時間區間" 內，與 {holding_hours} 小時前的 K 線收盤價的價差。
    Analyzes the price difference of a stock within a "specified time frame",
    between the current bar and the close price {holding_hours} hours prior.
    """

    print(f"正在下載 {ticker} 的 {interval} K線數據...")

    # --- 修改點：靈活處理 'period' 或 'start/end' ---
    download_params = {
        "tickers": ticker,
        "interval": interval,
        "progress": False,
        "prepost": False
    }
    if period:
        download_params["period"] = period
        print(f"Downloading data for period: {period}")
    elif start_date and end_date:
        download_params["start"] = start_date
        download_params["end"] = end_date
        print(f"Downloading data from {start_date} to {end_date}...")
    else:
        print("錯誤：您必須提供 'period' 或是 'start_date' 和 'end_date'。")
        print("ERROR: You must provide either 'period' or both 'start_date' and 'end_date'.")
        return None, None

    stock_data = yf.download(**download_params)
    # --- 修改結束 ---

    if stock_data.empty:
        print(f"錯誤：無法在指定區間下載 {ticker} 的數據。")
        print(f"ERROR: Failed to download data for {ticker} in the specified range.")
        return None, None

    print(f"數據下載完成，共 {len(stock_data)} 筆。")
    print(f"Data download complete. Total bars: {len(stock_data)}.")
    print("-" * 30)

    # --- 新增：時區轉換 (Add: Timezone Conversion) ---
    try:
        # yfinance 返回的數據通常是帶有時區資訊的，通常是 UTC
        # 如果沒有時區資訊，先指定為 UTC (以防萬一)
        if stock_data.index.tzinfo is None:
             stock_data = stock_data.tz_localize('UTC')
        else:
             # 如果已經有時區資訊，確保是 UTC (yfinance 預設)
             stock_data = stock_data.tz_convert('UTC')

        # 將數據轉換到 'America/New_York' 時區
        new_york_tz = pytz.timezone('America/New_York')
        stock_data = stock_data.tz_convert(new_york_tz)
        print("數據已轉換至 'America/New_York' 時區。")
        print("-" * 30)

    except Exception as e:
        print(f"時區轉換錯誤 (Timezone conversion error): {e}")
        # 即使時區轉換失敗，我們仍然可以繼續使用原始數據 (UTC)，但會印出警告
        print("WARNING: Timezone conversion failed. Proceeding with original data timezone.")
        print("-" * 30)
    # --- 時區轉換結束 (End of Timezone Conversion) ---


    # --- 參數計算 (Parameter Calculation) ---
    try:
        minutes_per_bar = int(re.findall(r'(\d+)', interval)[0])
    except Exception:
        print(f"錯誤：無法從 K 線間隔 '{interval}' 提取分鐘數。請使用 '1m', '5m', '15m' 格式。")
        print(f"ERROR: Could not parse minutes from interval '{interval}'. Please use '1m', '5m', '15m' format.")
        return None, None

    total_minutes_to_lag = holding_hours * 60

    if total_minutes_to_lag % minutes_per_bar != 0:
        print(f"錯誤：持有時間 {holding_hours} 小時 ({total_minutes_to_lag} 分鐘) 不是 K 線間隔 {minutes_per_bar} 分鐘的整數倍。")
        print(f"ERROR: Holding period {holding_hours} hours ({total_minutes_to_lag} mins) is not an integer multiple of the K-bar interval ({minutes_per_bar} mins).")
        return None, None

    lag_periods = int(total_minutes_to_lag / minutes_per_bar)

    print(f"分析參數 (Analysis Parameters)：")
    print(f"  - K線間隔 (Interval): {interval} ({minutes_per_bar} 分鐘)")
    print(f"  - 持有時長 (Holding Period): {holding_hours} 小時 (Hours)")
    print(f"  - 回溯 K 棒 (Lag Periods): {lag_periods} 根 K 棒 (bars)")
    print("-" * 30)

    # --- 核心計算 (Core Calculation) ---
    stock_data['P_buy'] = stock_data['Close'].shift(lag_periods)
    stock_data['P_sell'] = stock_data['Close']

    analysis_df = stock_data.dropna().copy()

    if analysis_df.empty:
        print(f"錯誤：數據量不足，無法進行 {holding_hours} 小時的回測分析。")
        print(f"ERROR: Not enough data for a {holding_hours}-hour lookback analysis.")
        return None, None

    analysis_df['price_diff'] = analysis_df['P_sell'] - analysis_df['P_buy']
    analysis_df['return'] = (analysis_df['P_sell'] - analysis_df['P_buy']) / analysis_df['P_buy']

    # --- 統計分析結果 (Statistical Analysis) ---
    total_trades = len(analysis_df)
    losing_trades = (analysis_df['price_diff'] < 0).sum()

    results = {
        "ticker": ticker,
        "holding_hours": holding_hours,
        "total_trades": total_trades,
        "loss_probability": losing_trades / total_trades if total_trades > 0 else 0,
        "avg_price_diff": analysis_df['price_diff'].mean(),
        "avg_gain_diff": analysis_df[analysis_df['price_diff'] > 0]['price_diff'].mean(),
        "avg_loss_diff": analysis_df[analysis_df['price_diff'] < 0]['price_diff'].mean(),
        "expected_return": analysis_df['return'].mean(),
        "win_rate": (analysis_df['return'] > 0).sum() / total_trades if total_trades > 0 else 0,
    }

    return results, analysis_df

# @title
#儲存格4
def print_results(results: dict):
    """格式化並印出中英分析結果"""
    if not results: return

    holding_hours = results['holding_hours']

    print(f"======= {results['ticker']} 股票 {holding_hours} 小時持有期分析結果 ({holding_hours}-Hour Holding Period Analysis) =======")
    print(f"總有效交易次數 (Total Trades): {results['total_trades']:,}")
    print("-" * 40)

    print(f"下跌機率 (Probability of Loss): {results['loss_probability']:.2%}")
    print(f"    (定義: {holding_hours} 小時後價格低於 {holding_hours} 小時前價格的機率)")
    print(f"    (Definition: Probability that P_sell < P_buy)")

    print("-" * 40)
    print(f"價差期望值 (Expected Price Difference): ${results['avg_price_diff']:.4f}")
    print(f"    - 平均獲利價差 (Avg. Gain Amount): ${results.get('avg_gain_diff', 0):.4f}")
    print(f"    - 平均虧損價差 (Avg. Loss Amount): ${results.get('avg_loss_diff', 0):.4f}")

    print("-" * 40)
    print(f"價值期望值 (Expected Return %): {results['expected_return']:.4%}")
    print(f"    (報酬率 > 0 的機率 (Win Rate %): {results['win_rate']:.2%})")

    print("=" * 70)
    print("註 (Note): 此分析未考慮交易手續費或滑價成本 (This analysis excludes commissions and slippage.)")

# --- 這裡開始是修改過的函式 (This function is modified) ---

def plot_results(results: dict, analysis_df: pd.DataFrame, output_folder: str = 'output_img'):
    """
    將分析結果視覺化 (全英文圖表)
    修改：繪製每筆交易的 "報酬率 (%)" 隨時間變化的圖表
    """
    if not results or analysis_df.empty: return

    holding_hours = results['holding_hours']

    sns.set_style("whitegrid")
    plt.figure(figsize=(15, 7))

    # 建立「交易序號」的 X 軸 (Create a numerical index for the x-axis)
    x_values = range(len(analysis_df))

    # --- 核心修改 (Core Modification) ---
    # 1. 繪製 'return' 欄位，並 * 100 轉換為百分比
    #    (Plot the 'return' column and multiply by 100 to convert to percentage)
    plt.plot(x_values, analysis_df['return'].values * 100,
             label='Return (Percentage)', color='dodgerblue', linewidth=0.8)

    # 2. 損益兩平線仍然是 0 (Breakeven line is still 0)
    plt.axhline(y=0, color='red', linestyle='--', label='Breakeven (Return = 0%)')

    # 3. 繪製 "平均報酬率" (Plot the "Average Return")
    avg_return = results['expected_return']
    plt.axhline(y=avg_return * 100, color='orange', linestyle=':',
                label=f'Average Return ({avg_return:.4%})')
    # --- 修改結束 (End of Modification) ---


    # 建立自訂的 X 軸標籤 (Create custom x-axis ticks)
    num_ticks = 10
    tick_indices = np.linspace(0, len(analysis_df) - 1, num_ticks, dtype=int)
    tick_labels = analysis_df.index[tick_indices].strftime('%m-%d %H:%M')

    plt.xticks(ticks=tick_indices, labels=tick_labels, rotation=30, ha='right')

    # 更新標題和 Y 軸標籤 (Update Title and Y-axis Label)
    plt.title(f"{results['ticker']} - {holding_hours}-Hour Holding Return (Per Trade)", fontsize=16)
    plt.xlabel("Date (Skipping Non-Trading Periods)", fontsize=12)
    plt.ylabel("Return (%)", fontsize=12) # Y 軸標籤改為 Return (%)
    plt.legend()

    plt.tight_layout()

    plot_filename = f"{output_folder}/{results['ticker']}_{holding_hours}hr.png"
    plt.savefig(plot_filename)
    print(f"Plot saved as {plot_filename}")
    # plt.show()

# @title
#儲存格5
# --- 您可以在這裡修改共用參數 (You can modify parameters here) ---
# 持有小時 (Holding Hours) - 兩項分析共用
HOLDING_HOURS = 2.5
# 股票代碼 (Ticker Symbol) - 兩項分析共用
TICKER_SYMBOLS = ['ADBE','ALAB','AMD','BE','BND','CIFR','EOSE','FIG','GLD','GOOG','GRAB','IBIT','IONQ','LEU','MGK','MP','NVDA','NVTS','ONDS','POWI','RBRK','RCAT','SIVR','SMR','SOFI','TMDX','TSM','UUUU','VOO','VST','WWR']

# @title

#儲存格6
# --- 您可以在這裡修改個別參數 (You can modify parameters here) ---

# --- 分析 1: 1m K線, 最近 7 天 ---
INTERVAL_1M = '1m'
PERIOD_1M = '5d'


# --- 執行主程式 (Run Main Program) ---
if __name__ == "__main__":
    for TICKER_SYMBOL in TICKER_SYMBOLS:
      # --- 執行分析 1 (Run Analysis 1) ---
      print(f"\n=======================================================")
      print(f"======= 開始分析 1 (Starting Analysis 1): {INTERVAL_1M} K線 / {PERIOD_1M} =======")
      print(f"=======================================================\n")

      analysis_results_1m, detailed_df_1m = analyze_fixed_time_lag(
          ticker=TICKER_SYMBOL,
          interval=INTERVAL_1M,
          holding_hours=HOLDING_HOURS*1,
          period=PERIOD_1M  # <-- 使用 'period'
      )

      if analysis_results_1m and not detailed_df_1m.empty:
          print_results(analysis_results_1m)
          plot_results(analysis_results_1m, detailed_df_1m)

      print(f"\n======= {INTERVAL_1M} K線分析結束 (Analysis Complete) =======")

# @title

#儲存格7
# --- 您可以在這裡修改個別參數 (You can modify parameters here) ---

# --- 分析 1: 1m K線, 最近 7 天 ---
INTERVAL_1M = '60m'
PERIOD_1M = '5d'


# --- 執行主程式 (Run Main Program) ---
if __name__ == "__main__":
    for TICKER_SYMBOL in TICKER_SYMBOLS:
      # --- 執行分析 2 (Run Analysis 2) ---
      print(f"\n=======================================================")
      print(f"======= 開始分析 2 (Starting Analysis 2): {INTERVAL_1M} K線 / {PERIOD_1M} =======")
      print(f"=======================================================\n")

      analysis_results_1m, detailed_df_1m = analyze_fixed_time_lag(
          ticker=TICKER_SYMBOL,
          interval=INTERVAL_1M,
          holding_hours=HOLDING_HOURS*2,
          period=PERIOD_1M  # <-- 使用 'period'
      )

      if analysis_results_1m and not detailed_df_1m.empty:
          print_results(analysis_results_1m)
          plot_results(analysis_results_1m, detailed_df_1m)

      print(f"\n======= {INTERVAL_1M} K線分析結束 (Analysis Complete) =======")

# @title

#儲存格7
# --- 您可以在這裡修改個別參數 (You can modify parameters here) ---

# --- 分析 3: 5m K線, 自訂日期 ---
# *** 警告 (WARNING) ***
# 5m K棒最多只能下載最近 60 天的數據。
# (5m K-bars are limited to the last 60 days of data.)
INTERVAL_5M = '60m'
# (請使用 'YYYY-MM-DD' 格式，並確保在 60 天內)
PERIOD_1M = '5d'
START_DATE_5M = '2025-07-20'
END_DATE_5M = '2025-08-10'


# --- 執行主程式 (Run Main Program) ---
if __name__ == "__main__":
    for TICKER_SYMBOL in TICKER_SYMBOLS:
      # --- 執行分析 3 (Run Analysis 3) ---
      print(f"\n=======================================================")
      print(f"======= 開始分析 3 (Starting Analysis 3): {INTERVAL_5M} K線 / 自訂日期 =======")
      print(f"=======================================================\n")

      analysis_results_5m, detailed_df_5m = analyze_fixed_time_lag(
          ticker=TICKER_SYMBOL,
          interval=INTERVAL_5M,
          holding_hours=HOLDING_HOURS*4,
          period=PERIOD_1M
      )

      if analysis_results_5m and not detailed_df_5m.empty:
          print_results(analysis_results_5m)
          plot_results(analysis_results_5m, detailed_df_5m)

      print(f"\n======= {INTERVAL_5M} K線分析結束 (Analysis Complete) =======")